#ifndef REDI_INDEX_SEQ_H
#define REDI_INDEX_SEQ_H

// Copyright Jonathan Wakely 2012-2015
// Distributed under the Boost Software License, Version 1.0.
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// 

#if __cplusplus < 201402L
# include <cstddef>
#else
# include <utility>
#endif

namespace redi
{
#if __cplusplus < 201402L

  /// A type that represents a parameter pack of zero or more integers.
  template<std::size_t... Indices>
    struct index_sequence
    {
      /// Generate an index_sequence with an additional element.
      template<std::size_t N>
        using append = index_sequence<Indices..., N>;
    };

  /// Unary metafunction that generates an index_sequence containing [0, Size)
  template<std::size_t Size>
    struct make_index_sequence
    {
      using type
        = typename make_index_sequence<Size-1>::type::template append<Size-1>;
    };

  // Terminal case of the recursive metafunction.
  template<>
    struct make_index_sequence<0u>
    {
      typedef index_sequence<> type;
    };

  template<typename... Types>
    using index_sequence_for
      = typename make_index_sequence<sizeof...(Types)>::type;

#else
  using std::index_sequence;
  using std::make_index_sequence;
  using std::index_sequence_for;
#endif

}  // namespace redi

#endif  // REDI_INDEX_SEQ_H

// vi: set ft=cpp sw=2:
